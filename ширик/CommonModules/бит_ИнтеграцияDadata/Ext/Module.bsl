Функция ПолучитьНастройки() Экспорт
	Настройки = Новый Структура("Ключ, Адрес");
	МЗ = РегистрыСведений.бит_НастройкиИнтеграцииDadata.СоздатьМенеджерЗаписи();
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда 
		//Настройки.УчаствующиеПользователи = МЗ.УчаствующиеПользователи.Получить();
		Настройки.Ключ = МЗ.КлючАПИ;
		Настройки.Адрес = МЗ.АдресDadata;
	КонецЕсли; 
	Возврат Настройки;
КонецФункции

Функция НайтиСоздатьКлиента(СтруктураПоиска) Экспорт
	НастройкиИнтеграции = ПолучитьНастройки();
	Клиент = НайтиКлиента(СтруктураПоиска, НастройкиИнтеграции);
	Если Клиент = Неопределено Тогда
		Клиент = Справочники.Клиенты.СоздатьЭлемент();
		Попытка
			Фамилия = "";
			Имя = "";
			Отчество = "";
			Фамилия = СтруктураПоиска.ФИО[0];
			Имя = СтруктураПоиска.ФИО[1];
			Отчество = СтруктураПоиска.ФИО[2];
		Исключение
		КонецПопытки;	
		Клиент.Фамилия = Фамилия;
		Клиент.Имя = Имя;
		Клиент.Отчество = Отчество;
		Клиент.Пол = Перечисления.ПолФизическихЛиц.НеУказан;
		Клиент.ИсточникИнформации = НастройкиИнтеграции.ИсточникИнформации;
		Клиент.Наименование = РаботаСКлиентамиПереопределяемый.ПредставлениеПоФИО(Клиент.Фамилия, Клиент.Имя, Клиент.Отчество);
		ДР = СтрРазделить(СтруктураПоиска.ДатаРождения, "-");
		Клиент.ДатаРождения = Дата(ДР[0], ДР[1], ДР[2]);
		Клиент.Записать();	
		
		НоваяКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		НоваяКИ.Объект = Клиент.Ссылка;
		НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый;
		НоваяКИ.Поле3 = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтруктураПоиска.Телефон, " ", ""), "(", ""), ")", "");//СтруктураПоиска.Телефон;
		НоваяКИ.Представление = СтруктураПоиска.Телефон;
		
		Попытка
			НоваяКИ.Записать(Ложь);	
		Исключение 
		КонецПопытки;		
		
	КонецЕсли;	
	Возврат Клиент.Ссылка;
КонецФункции

Функция НайтиКлиента(СтруктураПоиска, НастройкиИнтеграции) Экспорт
	
	Если НастройкиИнтеграции.ОтборКлиента.Телефон Тогда  
		РезультатТел = НайтиПоТелефону(СтруктураПоиска.Телефон);
		Если РезультатТел.Количество() = 1 Тогда
			Возврат РезультатТел[0].Клиент;
		КонецЕсли;
		Если НастройкиИнтеграции.ОтборКлиента.Фамилия Или НастройкиИнтеграции.ОтборКлиента.Имя Или НастройкиИнтеграции.ОтборКлиента.Отчество Тогда
			РезультатФИО = НайтиПоФИО(СтруктураПоиска.ФИО, НастройкиИнтеграции.ОтборКлиента);
			Если РезультатФИО.Количество() = 0 И РезультатТел.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если РезультатФИО.Количество() = 0 Тогда
				Возврат РезультатТел[0].Клиент;
			КонецЕсли;
			
			Если РезультатТел.Количество() = 0 Тогда
				Возврат РезультатФИО[0].Клиент;
			КонецЕсли; 
			Для Каждого СтрТЗ Из РезультатТел Цикл
				Если РезультатФИО.Найти(СтрТЗ.Клиент, "Клиент") <> Неопределено Тогда
					Возврат СтрТЗ.Клиент;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Неопределено;
		КонецЕсли;
		
		
	ИначеЕсли НастройкиИнтеграции.ОтборКлиента.Фамилия Или НастройкиИнтеграции.ОтборКлиента.Имя Или НастройкиИнтеграции.ОтборКлиента.Отчество Тогда
		РезультатФИО = НайтиПоФИО(СтруктураПоиска.ФИО, НастройкиИнтеграции.ОтборКлиента);
		Если РезультатФИО.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат РезультатФИО[0].Клиент;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции  

Функция НайтиПоТелефону(Телефон)
	ЗапросТел = Новый Запрос;
	
	Телефоны = Новый Массив;
	Телефоны.Добавить(Телефон);
	Телефоны.Добавить(СтрЗаменить(Телефон, "+7", "8"));
	Телефоны.Добавить(СтрЗаменить(СтрЗаменить(Телефон, "+7", "8"), " ", ""));
	Телефоны.Добавить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Телефон, "+7", "8"), " ", ""), "(", ""), ")", ""));
	Телефоны.Добавить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Телефон, " ", ""), "(", ""), ")", ""));
	Телефоны.Добавить(СтрЗаменить(Телефон, " ", ""));
	Телефоны.Добавить(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Телефон));
	Телефоны.Добавить(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтрЗаменить(Телефон, "+7", "8")));
	Телефоны.Добавить(СтрЗаменить(Телефон, "-", ""));
	Телефоны.Добавить(СтрЗаменить(СтрЗаменить(Телефон, "-", ""), "+7", "8"));
	
	
	ЗапросТел.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Клиент
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Поле3 В(&Телефоны)
	|	ИЛИ КонтактнаяИнформация.Представление В(&Телефоны)";  
	
	ЗапросТел.УстановитьПараметр("Телефоны", Телефоны);
	
	Возврат ЗапросТел.Выполнить().Выгрузить();
КонецФункции

Функция НайтиПоФИО(ФИО, ПараметрыОтбора)
	
	Попытка
		Фамилия = ФИО[0];
		Имя = ФИО[1];
		Отчество = ФИО[2];
	Исключение
	КонецПопытки;
	
	ЗапросФИО = Новый Запрос;
	ЗапросФИО.Текст = "ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Клиент
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ 
	|   НЕ Клиенты.ПометкаУдаления
	|	<УСЛОВИЕ_ФАМИЛИЯ>
	|	<УСЛОВИЕ_ИМЯ>
	|	<УСЛОВИЕ_ОТЧЕСТВО>"; 
	Если ПараметрыОтбора.Фамилия И Фамилия <> Неопределено Тогда
		ЗапросФИО.Текст = СтрЗаменить(ЗапросФИО.Текст, "<УСЛОВИЕ_ФАМИЛИЯ>", "И Клиенты.Фамилия = &Фамилия");
		ЗапросФИО.УстановитьПараметр("Фамилия", Фамилия);
	Иначе
		ЗапросФИО.Текст = СтрЗаменить(ЗапросФИО.Текст, "<УСЛОВИЕ_ФАМИЛИЯ>", "");
	КонецЕсли;
	
	Если ПараметрыОтбора.Имя И Имя <> Неопределено Тогда
		ЗапросФИО.УстановитьПараметр("Имя", Имя);
		ЗапросФИО.Текст = СтрЗаменить(ЗапросФИО.Текст, "<УСЛОВИЕ_ИМЯ>", "И Клиенты.Имя = &Имя");	
	Иначе
		ЗапросФИО.Текст = СтрЗаменить(ЗапросФИО.Текст, "<УСЛОВИЕ_ИМЯ>", "");
	КонецЕсли;
	
	Если ПараметрыОтбора.Фамилия И Отчество <> Неопределено Тогда
		ЗапросФИО.УстановитьПараметр("Отчество", Отчество);
		ЗапросФИО.Текст = СтрЗаменить(ЗапросФИО.Текст, "<УСЛОВИЕ_ОТЧЕСТВО>", "И Клиенты.Отчество = &Отчество");
	Иначе
		ЗапросФИО.Текст = СтрЗаменить(ЗапросФИО.Текст, "<УСЛОВИЕ_ОТЧЕСТВО>", "");
	КонецЕсли;
	Возврат ЗапросФИО.Выполнить().Выгрузить();   
КонецФункции

Функция ПолучитьТелоЗапроса()
	Ответ = Новый Структура();
	Ответ.Вставить("jsonrpc", "2.0");
	Ответ.Вставить("id", Строка(Новый УникальныйИдентификатор));
	Ответ.Вставить("method", Неопределено);
	Ответ.Вставить("params", Новый Структура());
	Возврат Ответ;
КонецФункции

Функция ВыполнитьЗапрос(Текст) Экспорт
	
	Настройки = ПолучитьНастройки();
	Адрес = РазобратьАдресСайта(Настройки.Адрес);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = Адрес.HTTPАдресРесурса;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Accept", "application/json");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Token " + Настройки.Ключ);
	
	Тело = Новый Структура();
	Тело.Вставить("query", Текст);
	
	//если КоличествоПодсказок = 0, тогда по умолчанию вернет 10 подсказок 
	ТекстЗапроса = ПреобразоватьВСтрокуJSON(Тело);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	//соединяемся с сервисом подсказок
	Соединение = Новый HTTPСоединение(Адрес.HTTPСервер, 443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	ОтветHTTP = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Возврат ПрочитатьСтрокуJSON(ОтветHTTP.ПолучитьТелоКакСтроку());
	//бит_ИнтеграцияDadata.ПреобразоватьВСтрокуJSON(ЗначенияПолей);
КонецФункции

Функция ПолучитьXMLАдрес(ЗначенияПолей)
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	Возврат МодульРаботаСАдресами.КонвертироватьАдресИзJSONВXML(ЗначенияПолей, "", Перечисления.ТипыКонтактнойИнформации.Адрес);
КонецФункции

Функция СделатьПервуюЗаглавной(Стр)
	Возврат ВРег(Лев(Стр,1))+Сред(Стр,2);
КонецФункции


Функция ПреобразоватьВСтруктуруАдреса1с(Эл)
	Рез = Новый Структура();
	Рез.Вставить("value", Эл.unrestricted_value);
	Рез.Вставить("comment", "");
	_Данные = Эл.data;
	Рез.Вставить("id", _Данные.fias_id);
	Рез.Вставить("type", "Адрес");
	Рез.Вставить("country", ВРег(_Данные.Country));
	Рез.Вставить("addressType", "Административно-территориальный");
	Рез.Вставить("countryCode", "");
	Рез.Вставить("ZIPcode", _Данные.postal_code);
	
	Рез.Вставить("city", _Данные.city);
	Рез.Вставить("cityType", _Данные.city_type);
	Рез.Вставить("cityId", _Данные.city_fias_id); 
	
	Рез.Вставить("street", _Данные.street);
	Рез.Вставить("streetType", _Данные.street_type);
	Рез.Вставить("streetId", _Данные.street_fias_id); 
	
	Рез.Вставить("area", _Данные.region);
	Рез.Вставить("areaType", _Данные.region_type);
	Рез.Вставить("areaCode", _Данные.region_iso_code);
	Рез.Вставить("areaId", _Данные.region_fias_id);
	
	Рез.Вставить("district", _Данные.area);
	Рез.Вставить("districtType", _Данные.area_type);
	Рез.Вставить("districtId", _Данные.area_fias_id);
	
	Рез.Вставить("munDistrict", "");
	Рез.Вставить("munDistrictType", "");
	Рез.Вставить("munDistrictId", "");
	
	Рез.Вставить("settlement", _Данные.settlement);
	Рез.Вставить("settlementType", _Данные.settlement_type);
	Рез.Вставить("settlementId", _Данные.settlement_fias_id); 
	
	Рез.Вставить("cityDistrict", _Данные.city_district);
	Рез.Вставить("cityDistrictType", _Данные.city_district_type);
	Рез.Вставить("cityDistrictId", _Данные.city_district_fias_id);
	
	Рез.Вставить("territory", "");
	Рез.Вставить("territoryType", "");
	Рез.Вставить("territoryId", "");
	
	Рез.Вставить("locality", "");
	Рез.Вставить("localityType", "");
	Рез.Вставить("localityId", "");
	
	Рез.Вставить("houseType", СделатьПервуюЗаглавной(_Данные.house_type_full));
	Рез.Вставить("houseNumber", _Данные.house);
	Рез.Вставить("houseId", _Данные.house_fias_id);
	
	Рез.Вставить("buildings", Новый Массив);
	Если ЗначениеЗаполнено(_Данные.stead) И ЗначениеЗаполнено(_Данные.stead_type_full) Тогда
		Рез.buildings.Добавить(Новый Структура("type, number", СделатьПервуюЗаглавной(_Данные.stead_type_full), _Данные.stead));
	КонецЕсли;
	Если ЗначениеЗаполнено(_Данные.block) И ЗначениеЗаполнено(_Данные.block_type_full) Тогда
		Рез.buildings.Добавить(Новый Структура("type, number", СделатьПервуюЗаглавной(_Данные.block_type_full), _Данные.block));
	КонецЕсли; 
	
	Рез.Вставить("apartments", Новый Массив);
	Если ЗначениеЗаполнено(_Данные.flat) И ЗначениеЗаполнено(_Данные.flat_type_full) Тогда
		Рез.apartments.Добавить(Новый Структура("type, number", СделатьПервуюЗаглавной(_Данные.flat_type_full), _Данные.flat));
	КонецЕсли;
	
	Рез.Вставить("codeKLADR", _Данные.kladr_id);
	Рез.Вставить("oktmo", _Данные.oktmo);
	Рез.Вставить("okato", _Данные.okato);
	Рез.Вставить("asInDocument", "");
	Рез.Вставить("ifnsFLCode", _Данные.tax_office);
	Рез.Вставить("ifnsULCode", _Данные.tax_office_legal);
	Рез.Вставить("ifnsFLAreaCode", "");
	Рез.Вставить("ifnsULAreaCode", _Данные.tax_office_legal);
	Рез.Вставить("stead", _Данные.stead_type_full);
	Рез.Вставить("steadId", "");
	Рез.Вставить("КраткоеПредставление", Ложь);
	Для Каждого _Эл Из Рез Цикл
		Если _Эл.Значение = Неопределено Тогда
			Рез[_Эл.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

Функция ПолучитьПодсказки(Текст) Экспорт                        
	Подсказки = Новый Массив;
	Для Каждого Подск Из ВыполнитьЗапрос(Текст).suggestions Цикл
		Подсказки.Добавить(ПреобразоватьВСтрокуJSON(ПреобразоватьВСтруктуруАдреса1с(Подск)));
	КонецЦикла;
	Возврат Подсказки;
КонецФункции


Функция ПреобразоватьВСтрокуJSON(Объект) Экспорт
	JSONЗапись = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб, Истина);
	JSONЗапись.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(JSONЗапись, Объект);
	Возврат JSONЗапись.Закрыть();
КонецФункции

Функция ПрочитатьСтрокуJSON(Стр)
	JSONЧтение = Новый ЧтениеJSON;
	JSONЧтение.УстановитьСтроку(Стр);
	Возврат ПрочитатьJSON(JSONЧтение, Ложь);
КонецФункции


Функция РазобратьАдресСайта(Знач АдресСайта)
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	HTTPСервер		 			= ""; 
	HTTPПорт					= 0;
	HTTPАдресРесурса 			= "";
	HTTPЗащищенноеСоединение 	= Ложь;
	
	Если ЗначениеЗаполнено(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если ВРег(Лев(АдресСайта, 7)) = "HTTP://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли ВРег(Лев(АдресСайта, 8)) = "HTTPS://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			HTTPЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);
			HTTPАдресРесурса = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			HTTPСервер 		 = АдресСайта;
			HTTPАдресРесурса = "";
		КонецЕсли;	
		ПозицияДвоеточия = Найти(HTTPСервер, ":");
		Если ПозицияДвоеточия > 0 Тогда
			HTTPСерверСПортом = HTTPСервер;
			HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		Иначе
			HTTPПортСтрока = "0";
		КонецЕсли;
		
		HTTPПорт = ОбщегоНазначения.ПривестиСтрокуКЧислу(HTTPПортСтрока);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("HTTPСервер"	  			, HTTPСервер); 
	СтруктураРезультата.Вставить("HTTPПорт"		   			, HTTPПорт);
	СтруктураРезультата.Вставить("HTTPАдресРесурса"			, HTTPАдресРесурса);
	СтруктураРезультата.Вставить("HTTPЗащищенноеСоединение"	, HTTPЗащищенноеСоединение);
	
	Возврат СтруктураРезультата;
	
КонецФункции
